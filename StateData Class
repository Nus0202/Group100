// Virginia Tech Honor Code Pledge:
//
// As a Hokie, I will conduct myself with honor and integrity at all times.
// I will not lie, cheat, or steal, nor will I accept the actions of those who
// do.
// -- Zhengxiao Sun, Emily Kroliczak, Sean Stolburg

package prj5;

import java.util.Comparator;

/**
 * Virginia Tech Honor Code Pledge:
 * 
 * As a Hokie, I will conduct myself with honor and integrity
 * at all times.
 * I will not lie, cheat, or steal, nor will I accept the actions of
 * those who do.
 * --Emily Kroliczak, Sean Stolburg, Zhengxiao Sun
 */

/**
 * Represents StateData objects, whose function within this program will
 * including storing Race objects into LinkedLists
 * 
 * @author Emily Kroliczak, Sean Stolburg, Zhengxiao Sun
 * @version 04.21.2021
 */
public class StateData {

    private String stateName;
    private LinkedList<Race> races;

    /**
     * Creates a new StateData object
     * 
     * @param name
     *            This StateData's name
     * @param whiteCases
     *            This StateData's total number of white COVID-19 cases
     * @param blackCases
     *            This StateData's total number of black COVID-19 cases
     * @param latinoCases
     *            This StateData's total number of latino COVID-19 cases
     * @param asianCases
     *            This StateData's total number of asian COVID-19 cases
     * @param otherCases
     *            This StateData's total number of other races COVID-19 cases
     * @param whiteD
     *            This StateData's number of white COVID-19 deaths
     * @param blackD
     *            This StateData's number of black COVID-19 deaths
     * @param latinoD
     *            This StateData's number of latino COVID-19 deaths
     * @param asianD
     *            This StateData's number of asian COVID-19 deaths
     * @param otherD
     *            This StateData's number of other races COVID-19 deaths
     */
    public StateData(
        String name,
        int whiteCases,
        int blackCases,
        int latinoCases,
        int asianCases,
        int otherCases,
        int whiteD,
        int blackD,
        int latinoD,
        int asianD,
        int otherD) {

        stateName = name;
        Race white = new Race("white", whiteCases, whiteD);
        Race black = new Race("black", blackCases, blackD);
        Race latino = new Race("latino", latinoCases, latinoD);
        Race asian = new Race("asian", asianCases, asianD);
        Race otherRaces = new Race("other", otherCases, otherD);

        races = new LinkedList<Race>();

        races.add(white);
        races.add(black);
        races.add(latino);
        races.add(asian);
        races.add(otherRaces);
    }


    /**
     * Gets this StateData's name
     * 
     * @return This StateData object's name
     */
    public String getName() {

        return stateName;
    }


    /**
     * Gets this StateData's LinkedList of Race objects
     * 
     * @return This StateData's LinkedList<Race>
     */
    public LinkedList<Race> getLinkedList() {

        return races;
    }


    /**
     * Returns a string representation of this StateData
     * <StateData name> [Race object 1, Race object 2, ...]
     * 
     * @return This StateData's string representation
     */
    public String toString() {

        StringBuilder builder = new StringBuilder();

        builder.append(this.stateName);
        builder.append("\n");
        builder.append(this.races.toString());

        return builder.toString();
    }


    /**
     * Sorts the LinkedList of Race objects by alphabetical order
     */
    public void sortByAlphabet() {

        races.sort(new SortByAlpha());
    }


    /**
     * Sorts the LinkedList of Race objects in descending order of CFR
     */
    public void sortByCaseFatalityRatio() {

        races.sort(new SortByCFR());
    }

    /**
     * Contains the functionality used to sort the Race objects
     * in alphabetical order
     */
    private class SortByAlpha implements Comparator<Race> {

        /**
         * This method is used for sorting Race objects in
         * ascending order of name
         */
        @Override
        public int compare(Race raceOne, Race raceTwo) {

            return raceOne.getRace().compareTo(raceTwo.getRace());
        }

    }


    /**
     * Contains the functionality used to sort the Race objects
     * in descending order of CFR
     */
    private class SortByCFR implements Comparator<Race> {

        /**
         * This method is used for sorting Race objects in
         * descending order of CFR
         */
        @Override
        public int compare(Race raceOne, Race raceTwo) {

            if (raceOne.getCFR() > raceTwo.getCFR()) {
                return -1;
            }
            else if (raceOne.getCFR() < raceTwo.getCFR()) {
                return 1;
            }
            else {
                return 0;
            }
        }
    }
}
