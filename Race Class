/**
 * Virginia Tech Honor Code Pledge:
 * 
 * As a Hokie, I will conduct myself with honor and integrity
 * at all times.
 * I will not lie, cheat, or steal, nor will I accept the actions of
 * those who do.
 * --Emily Kroliczak, Sean Stolburg, Zhengxiao Sun
 */

/**
 * Represents a Race object, containing a string for its name and
 * two integers for its total number of COVID-19 cases and total number of
 * COVID-19 deaths. Within this program, Race objects
 * will be put into LinkedLists inside StateData objects.
 * 
 * @author Emily Kroliczak, Sean Stolburg, Zhengxiao Sun
 * @version 04.21.2021
 */
public class Race implements Comparable<Race> {

    private String race;
    private int totalCases;
    private int totalDeaths;
    private double caseFatalityRatio;

    /**
     * Creates a new Race object
     * 
     * @param name
     *            This Race's name
     * @param caseNum
     *            This Race's total number of cases
     * @param deathNum
     *            This Race's number of death cases
     */
    public Race(String name, int caseNum, int deathNum) {

        race = name;
        totalCases = caseNum;
        totalDeaths = deathNum;
        caseFatalityRatio = ((totalDeaths / (double)totalCases) * 100);
    }


    /**
     * Gets this Race's name
     * 
     * @return This Race object's name
     */
    public String getRace() {

        return race;
    }


    /**
     * Gets this Race's case fatality ratio (CFR)
     * 
     * @return This Race object's CFR
     */
    public double getCFR() {

        return caseFatalityRatio;
    }

    /**
     * Determines whether this Race object's CFR is higher than, less than, or
     * equal to the parameter Race object. If their CFRs are equal, this method
     * compares their names and ranks them based on lexicographically order
     * 
     * @param otherRace
     *            The other Race to compare this to
     * 
     * @return -1 if this Race object's CFR or name is smaller, 1 if this Race
     *         object's CFR or name is larger, and 0 if they have the same CFR
     *         and name
     */
    @Override
    public int compareTo(Race otherRace) {

        if (this.caseFatalityRatio < otherRace.caseFatalityRatio) {
            return -1;
        }
        else if (this.caseFatalityRatio > otherRace.caseFatalityRatio) {
            return 1;
        }
        else {
            return this.race.compareTo(otherRace.race);
        }

    }
    
    public class SortByName implements Comparator<Race> {

        /**
         * This method is used for sorting Race objects in 
         * ascending order of name
         */
        @Override
        public int compare(Race raceOne, Race raceTwo) {
           
            return raceOne.race.compareTo(raceTwo.race); 
        }
        
    }
    
    public class SortByCFR implements Comparator<Race> {

        /**
         * This method is used for sorting Race objects in 
         * ascending order of CFR
         */
        @Override
        public int compare(Race raceOne, Race raceTwo) {
           
            if (raceOne.getCFR() < raceTwo.getCFR()) {
                return -1; 
            }
            else if (raceOne.getCFR() > raceTwo.getCFR()) {
                return 1; 
            }
            else {
                return 0; 
            }
        }
        
    }
}
